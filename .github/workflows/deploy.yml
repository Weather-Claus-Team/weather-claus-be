name: Docker Deploy

on:
  push:
    branches-ignore:
      - ''  # 모든 브랜치에 대해 워크플로 실행

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application-secret.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build -x test

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build --platform linux/amd64 -t weather-claus .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag weather-claus:latest 323280431927.dkr.ecr.ap-northeast-2.amazonaws.com/weather-claus:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push 323280431927.dkr.ecr.ap-northeast-2.amazonaws.com/weather-claus:latest

      - name: SCP로 EC2에 파일 전송하기1.
        uses: appleboy/scp-action@v0.1.7 # 깃 액션 전송 라이브러리
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: docker-compose.prod.yml
          target: ./

      - name: SCP로 EC2에 파일 전송하기2.
        uses: appleboy/scp-action@v0.1.7 # 깃 액션 전송 라이브러리
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: docker-compose.yml
          target: ./

      - name: SCP로 EC2에 파일 전송하기3.
        uses: appleboy/scp-action@v0.1.7 # 깃 액션 전송 라이브러리
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: docker-compose.dev.yml
          target: ./

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_PROPERTIES: ${{ secrets.DOCKER_ENV }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: DOCKER_PROPERTIES
          script_stop: true
          script: |
            rm -rf ./env
            echo "$DOCKER_PROPERTIES" > ./env
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
